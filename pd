import java.util.Comparator;
import java.util.Map;
import java.util.HashMap;
import java.util.PriorityQueue;

public class ExpiredMap <K, V> implements Runnable {
    private class TimeRecorder {
        private K key;
        private long expiredTime;

        public TimeRecorder(K key, long duration) {
            this.key = key;
            this.expiredTime = duration + System.currentTimeMillis();
        }
        public K getKey() {
            return key;
        }
        public long getExpiredTime() {
            return expiredTime;
        }
    }

    private Map<K, V> expiredMap = new HashMap<>();
    private PriorityQueue<TimeRecorder> queue = new PriorityQueue<>(new Checker());

    class Checker implements Comparator<TimeRecorder> {
        @Override
        public int compare(TimeRecorder o1, TimeRecorder o2) {
            if (o1.getExpiredTime() > o2.getExpiredTime()) {
                return 1;
            } else if (o1.getExpiredTime() < o2.getExpiredTime()) {
                return -1;
            } else {
                return 0;
            }
        }
    }

    public synchronized void put(final K key, final V value, final long duration) {
        expiredMap.put(key, value);

        TimeRecorder timer = new TimeRecorder(key, duration);
        queue.add(timer);
    }
    public V get(final K key) {
        if (!expiredMap.containsKey(key)) {
            return null;
        } else {
            return expiredMap.get(key);
        }
    }

    public boolean flag = true;
    public void run() {
        while (flag == true) {
            TimeRecorder timer = queue.peek();

            while (timer.getExpiredTime() < System.currentTimeMillis()) {
                K key = queue.poll().getKey();
                expiredMap.remove(key);
                timer = queue.peek();
            }

            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                return;
            }
        }
    }

    public static void main(String[] args) {
        ExpiredMap map = new ExpiredMap();

        Thread cleanThread = new Thread(map);
        cleanThread.start();

        map.put("test1", "1", 1000);
        map.put("test2", "2", 10000);

        try {
            Thread.sleep(5000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        System.out.println(map.get("test1"));
        System.out.println(map.get("test2"));
        map.flag = false;
    }
}
