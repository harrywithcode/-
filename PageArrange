import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;
import java.util.Set;

public class PagesArrange {
    /* 
    * The method is used to re-arrange the input data and display every page by following the require rule.
    * */
    public String[] displayPages(final int pageSize, final int itemsCount, final String[] inputItems) {
        /* Transform input data to linked list, so that remove() is O(1) with high performance. */
        LinkedList<String> inputList = new LinkedList<>(Arrays.asList(inputItems));

        Set<String> visitedRecorder = new HashSet<>();
        List<String> resultContainer = new ArrayList<>();

        for (Iterator<String> inputIterator = inputList.iterator(); inputIterator.hasNext();) {
            String currentItem = inputIterator.next();
            final String hostId = currentItem.split(",")[0];

            /* If this page doesn't have duplicated id with current host id, then just add this item to page
            * and remove this item from input list.
             */
            if (!visitedRecorder.contains(hostId)) {
                visitedRecorder.add(hostId);
                resultContainer.add(currentItem);
                inputIterator.remove();
            }

            /* Exit cases*/
            if (visitedRecorder.size() == pageSize) {
                /* Happy ending that page is filled up with unique host ids, reset host-id recorder and iterator. */
                visitedRecorder = new HashSet<>();
                inputIterator = inputList.iterator();
                resultContainer.add("new page");
            } else if (!inputIterator.hasNext() && visitedRecorder.size() < pageSize) {
                /* Current page is not filled up with unique host ids. */
                inputIterator = inputList.iterator();
                int currentItemSize = visitedRecorder.size();
                visitedRecorder = new HashSet<>();

                /* Go back to head of re-edit input list and fill the left positions with duplicated host-ids.*/
                while (inputIterator.hasNext() && currentItemSize < pageSize) {
                    currentItem = inputIterator.next();
                    resultContainer.add(currentItem);
                    inputIterator.remove();
                    currentItemSize++;
                }
                resultContainer.add("new page");
            }
        }

        String[] result = new String[resultContainer.size()];
        int index = 0;
        for (String item : resultContainer) {
            result[index++] = item;
        }
        return result;
    }
    
    /* The method is used to read input from scanner, collect as array for further analyze. */
    private String[] readInput() {
        List<String> inputDataReceiver = new ArrayList<>();

        try (Scanner scanner = new Scanner(System.in)) {
            String pageSize = scanner.next();
            String itemsCount = scanner.next();
            String title = scanner.next();

            while (scanner.hasNextInt()) {
                inputDataReceiver.add(scanner.next());
            }
        } catch (IllegalStateException e) {
            System.out.println("Scanner is closed and failed to scan input data");
        }

        String[] inputData = new String[inputDataReceiver.size()];
        int index = 0;

        for (String item : inputDataReceiver) {
            inputData[index++] = item;
        }
        return inputData;
    }

    public static void main(String[] args) {
        String[] strs = new String[]{
                "1,28,300.1,SanFrancisco", //1
                "2,5,209.1,SanFrancisco", //1
                "3,7,208.1,SanFrancisco", //1
                "1,8,207.1,SanFrancisco", //2
                "1,10,206.1,Oakland", //3
                "1,16,205.1,SanFrancisco", //4
                "2,29,204.1,SanFrancisco", //2
                "2,20,203.1,SanFrancisco", //3
                "8,21,202.1,SanFrancisco", //1
                "2,18,201.1,SanFrancisco", //4
                "2,30,200.1,SanFrancisco", //5
                "15,27,109.1,Oakland", //1
                "10,13,108.1,Oakland", //2
                "11,26,107.1,Oakland", //2
                "12,9,106.1,Oakland", //2
                "13,1,105.1,Oakland", //3
                "22,17,104.1,Oakland", //3
                "1,2,103.1,Oakland", //5
                "28,24,102.1,Oakland", //3
                "18,14,11.1,SanJose", //4
                "6,25,10.1,Oakland", //4
                "19,15,9.1,SanJose", //4
                "3,19,8.1,SanJose", //5
                "3,11,7.1,Oakland", //6
                "27,12,6.1,Oakland", //5
                "1,3,5.1,Oakland", //6
                "25,4,4.1,SanJose", //5
                "5,6,3.1,SanJose", //6
                "29,22,2.1,SanJose", //6
                "30,23,1.1,SanJose" //6
        };

        PagesArrange pagesArrange = new PagesArrange();
        String[] result = pagesArrange.displayPages(5, 19, strs);

        for (String str : result) {
            System.out.println(str);
        }
    }
}
